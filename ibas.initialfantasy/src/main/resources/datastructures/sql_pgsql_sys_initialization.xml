<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE DataStructureOrchestration>
<ns2:DataStructureOrchestration
    xmlns:ns2="http://colorcoding.org/btulz/transformers">
    <Name>sql_pgsql_ibas_initialization</Name>
    <Description>基于PGSQL的结构映射说明</Description>
    <Integrated>true</Integrated>
    <DriverName>org.postgresql.Driver</DriverName>
    <DbUrl>jdbc:postgresql://${DbServer}:${DbPort}/${DbName}</DbUrl>
    <DbUser>${DbUser}</DbUser>
    <DbPassword>${DbPassword}</DbPassword>
    <Action Name="create db" Isolated="true" DbUrl="jdbc:postgresql://${DbServer}:${DbPort}/postgres">
        <Step Name="check db exists">
            <Script>
                SELECT COUNT(0) FROM pg_database WHERE datname = '${DbName}';
            </Script>
        </Step>
        <Step Name="create db" RunOnValue="0">
            <Script>
                 CREATE DATABASE "${DbName}";
            </Script>
        </Step>
    </Action>
    <Action Name="create stored procedures ${Company}_SP_TRANSACTION_NOTIFICATION">
        <Step Name="check and drop exists stored procedures">
            <Script>
                DROP FUNCTION IF EXISTS "${Company}_SP_TRANSACTION_NOTIFICATION"(character varying, character, integer, character varying, character varying);
            </Script>
        </Step>
        <Step Name="check and drop exists return type">
            <Script>
                DROP TYPE IF EXISTS "RESULT_TYPE_${Company}_SP_TRANSACTION_NOTIFICATION";
            </Script>
        </Step>
        <Step Name="create return type">
            <Script>
                CREATE TYPE "RESULT_TYPE_${Company}_SP_TRANSACTION_NOTIFICATION" AS ("Error" integer,"Message" character varying);
            </Script>
        </Step>
        <Step Name="create stored procedures">
            <Script>
                CREATE OR REPLACE FUNCTION "${Company}_SP_TRANSACTION_NOTIFICATION" (
                    object_type character varying,                             /*对象类型（BOCode）*/
                    transaction_type character,                                /*业务类型（Add:A-添加, Update:U-更新, Delete:D-删除）*/
                    num_of_cols_in_key integer,                                /*主键个数*/
                    list_of_key_cols_tab_del character varying,                /*主键名称*/
                    list_of_cols_val_tab_del character varying                 /*主键值*/
                ) RETURNS SETOF "RESULT_TYPE_${Company}_SP_TRANSACTION_NOTIFICATION" AS $_$
                DECLARE
                    error integer;                                            /*返回值(0 无错误)*/
                    error_message character varying;                               /*返回的消息*/
                    result record;
                BEGIN
                    /* 返回值 */
                    error = 0;
                    error_message = N'OK';
                    /*--------------------------------------------------------------------------------------------------------------------------------*/
                    /*ADD YOUR CODE HERE*/
                    /*--------------------------------------------------------------------------------------------------------------------------------*/
                    /*return*/
                    FOR result IN SELECT error "Error",error_message "Message" LOOP
                      RETURN NEXT result;
                    END LOOP;
                END;
                $_$ LANGUAGE plpgsql;
            </Script>
        </Step>
    </Action>
    <Action Name="create stored procedures ${Company}_SYS_SP_GET_USER_MODULES">
        <Step Name="check and drop exists stored procedures">
            <Script>
                DROP FUNCTION IF EXISTS "${Company}_SYS_SP_GET_USER_MODULES"(character varying, character varying);
            </Script>
        </Step>
        <Step Name="check and drop exists return type">
            <Script>
                DROP TYPE IF EXISTS "RESULT_TYPE_${Company}_SYS_SP_GET_USER_MODULES";
            </Script>
        </Step>
        <Step Name="create return type">
            <Script>
                CREATE TYPE "RESULT_TYPE_${Company}_SYS_SP_GET_USER_MODULES" AS ("ModuleId" character varying,"ModuleName" character varying,"ModuleCategory" character varying,"ModuleEntry" character varying,"AuthValue" character varying);
            </Script>
        </Step>
        <Step Name="create stored procedures">
            <Script>
                CREATE OR REPLACE FUNCTION "${Company}_SYS_SP_GET_USER_MODULES" (
                    platform character varying,        /*平台代码*/
                    userCode character varying         /*用户编码*/
                ) RETURNS SETOF "RESULT_TYPE_${Company}_SYS_SP_GET_USER_MODULES" AS $_$
                DECLARE
                    result record;
                    platform2 character varying;           /*平台代码*/
                BEGIN
                    IF (platform = 'DESKTOP' OR platform = 'TABLET') THEN
                        platform2 = 'COMBINATION';
                    ELSE
                        platform2 = platform;
                    END IF;

                    IF EXISTS (SELECT 0 FROM "${Company}_SYS_USER" WHERE "Code" = userCode AND "Super" = 'Y') THEN
                        /* 超级用户全部权限 */
                        FOR result IN
                            SELECT A."ModuleId",A."ModuleName",A."ModuleCategory",A."ModuleEntry",CAST('A' as character varying) "AuthValue"
                            FROM "${Company}_SYS_MODULE" A
                            WHERE (A."PlatformId" = platform OR A."PlatformId" = platform2) AND A."Activated" = 'Y'
                        LOOP
                          return next result;
                        END LOOP;
                    ELSE
                        /* 非超级用户，角色权限 */
                        FOR result IN
                            SELECT A."ModuleId",A."ModuleName",A."ModuleCategory",A."ModuleEntry",C."AuthValue"
                            FROM "${Company}_SYS_MODULE" A INNER JOIN (
                                SELECT DISTINCT B."ModuleId",B."AuthValue"
                                FROM "${Company}_SYS_PRIVILEGE" B
                                WHERE (B."PlatformId" = platform OR B."PlatformId" = platform2) AND B."Activated" = 'Y' AND B."AuthValue" &lt;&gt; 'N' AND B."RoleCode" IN (
                                    SELECT "OrgCode"
                                    FROM "${Company}_SYS_USER"
                                    WHERE "Code" = userCode)
                            ) C ON A."ModuleId" = C."ModuleId"
                            WHERE (A."PlatformId" = platform OR A."PlatformId" = platform2) AND A."Activated" = 'Y'
                        LOOP
                          return next result;
                        END LOOP;
                    END IF;
                END;
                $_$ LANGUAGE plpgsql;
            </Script>
        </Step>
    </Action>
    <Action Name="create stored procedures ${Company}_SYS_SP_GET_USER_PRIVILEGES">
        <Step Name="check and drop exists stored procedures">
            <Script>
                DROP FUNCTION IF EXISTS "${Company}_SYS_SP_GET_USER_PRIVILEGES"(character varying, character varying);
            </Script>
        </Step>
        <Step Name="check and drop exists return type">
            <Script>
                DROP TYPE IF EXISTS "RESULT_TYPE_${Company}_SYS_SP_GET_USER_PRIVILEGES";
            </Script>
        </Step>
        <Step Name="create return type">
            <Script>
                CREATE TYPE "RESULT_TYPE_${Company}_SYS_SP_GET_USER_PRIVILEGES" AS ("Source" character varying, "Target" character varying, "Value" character varying);
            </Script>
        </Step>
        <Step Name="create stored procedures">
            <Script>
                CREATE OR REPLACE FUNCTION "${Company}_SYS_SP_GET_USER_PRIVILEGES" (
                    platform character varying,        /*平台代码*/
                    userCode character varying         /*用户编码*/
                ) RETURNS SETOF "RESULT_TYPE_${Company}_SYS_SP_GET_USER_PRIVILEGES" AS $_$
                DECLARE
                    result record;
                    platform2 character varying;           /*平台代码*/
                BEGIN
                    IF (platform = 'DESKTOP' OR platform = 'TABLET') THEN
                        platform2 = 'COMBINATION';
                    ELSE
                        platform2 = platform;
                    END IF;

                    IF EXISTS (SELECT 0 FROM "${Company}_SYS_USER" WHERE "Code" = userCode AND "Super" = 'Y') THEN
                        /* 超级用户全部权限 */
                        FOR result IN
                            SELECT CAST('M' as character varying) "Source", "ModuleId" "Target", "AuthValue" "Value"
                            FROM "${Company}_SYS_PRIVILEGE"
                            LIMIT 0
                        LOOP
                          return next result;
                        END LOOP;
                    ELSE
                        -- 非超级用户，角色权限
                        FOR result IN
                            SELECT "Source", "Target", "Value"
                            FROM (
                                -- 模块的权限设置
                                SELECT CAST('M' as character varying) "Source", "ModuleId" "Target", "AuthValue" "Value", "RoleCode"
                                FROM "${Company}_SYS_PRIVILEGE"
                                WHERE ("PlatformId" = platform OR "PlatformId" = platform2) AND "Activated" = 'Y' AND COALESCE("Target",'') = ''
                                UNION ALL
                                -- 应用的权限设置
                                SELECT CAST('A' as character varying) "Source", "Target" "Target", "AuthValue" "Value", "RoleCode"
                                FROM "${Company}_SYS_PRIVILEGE"
                                WHERE ("PlatformId" = platform OR "PlatformId" = platform2) AND "Activated" = 'Y' AND COALESCE("Target",'') &lt;&gt; ''
                            ) T0
                            WHERE T0."RoleCode" IN (
                                SELECT "OrgCode"
                                FROM "${Company}_SYS_USER"
                                WHERE "Code" = userCode
                            )
                        LOOP
                          return next result;
                        END LOOP;
                    END IF;
                END;
                $_$ LANGUAGE plpgsql;
            </Script>
        </Step>
    </Action>
</ns2:DataStructureOrchestration>